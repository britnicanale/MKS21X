public class Barcode implements Comparable<Barcode>{
    private String zip, code;

    public Barcode(String z){
	try{
	    Integer.parseInt(z);
	}catch(NumberFormatException e){
	    throw new IllegalArgumentException();
	}
	if(z.length() != 5){
	    throw new IllegalArgumentException();
	}
	zip = z;
    }

    public String toString(){
	return toCode(zip) + " (" + zip + ")";
    }
    public int compareTo(Barcode other){
	return Integer.parseInt(zip) - Integer.parseInt(other.getZip());
    }
    public static String toCode(String zip){
	if(zip.length() != 5){
	    throw new IllegalArgumentException();
	}
	String code = "|";
	String[] convert = new String[] {"||:::",":::||","::|:|","::||:",":|::|",":|:|:",":||::","|:::|","|::|:","|:|::"};
	for(int i = 0; i < 5; i++){
	    try{
		code+= convert[Character.getNumericValue(zip.charAt(i))];
	    }
	    catch(NumberFormatException e){
		throw new IllegalArgumentException();
	    }
	}
	code += convert[getCheck(zip)]+ "|";
	return code;
    }
    private static int getCheck(String zip){
	int total = 0;
	if(zip.length() != 5){
            throw new IllegalArgumentException();
        }
	for(int i = 0; i < 5; i++){
	    try{
		total+=Character.getNumericValue(zip.charAt(i));
	    }
	    catch(NumberFormatException e){
                throw new IllegalArgumentException();
	    }
	}
	return total % 10;
    }


    public static String toZip(String code){
	String zip = "";
        String[] convert = new String[] {"||:::",":::||","::|:|","::||:",":|::|",":|:|:",":||::","|:::|","|::|:","|:|::"};
	if((code.charAt(0) != '|' || code.charAt(31) != '|') || code.length() != 32){
	    throw new IllegalArgumentException();
	}
	for(int i = 1; i < 31; i += 5){
	    for(int j = 0; j < 10; j++){
		if(code.substring(i, i+5).equals(convert[j])){
		    zip+=j;
		}
	    }
	}
	if(zip.length() < 5){
	    throw new IllegalArgumentException();
	}
	if(!code.substring(26,30).equals(convert[getCheck(zip)])){
	    throw new IllegalArgumentException();
	}
	return zip;
    }

    public String getCode(){
	return toCode(zip);
    }

    public String getZip(){
	return zip;
    }
}
